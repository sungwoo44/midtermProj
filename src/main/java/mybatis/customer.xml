<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!--  이 파일의 이름은 SQL 매퍼 입니다. 실행할 sql 만 모아놓은 파일입니다.
  		1) DML - insert, update, delete, select 와 동일한 태그에 작성하기  
  		2) dao 메소드에서 지정했던 메소드의 인자, 리턴타입 정하기 
  		
  		※ 주의 : 자바 객체의 변수(속성)명과 파라미터 기호 #{} 이름을 동일하게 합니다. 
  				 파라미터가 Map 일 경우 KEY 이름과 파라미터 이름을 동일하게 사용
  				 기본 형식, String 은 변수 선언 키워드와 동일하게 합니다. 
  				 
  		3) dto(또는 Vo) 클래스는 커스텀 생성자를 사용하고, 컬럼명과 변수명 순서를 같게 합니다.
  		4) namespace, id 속성값 
  		5) 리턴타입이 List 일 때에는 제너릭타입만 설정하면 됩니다.
  		6) 매퍼에서 select  가 리턴이 여러 행 또는 1개 행인지 판단하여
  				sqlSession  메소드는  selectList / selectOne 
  				
  		7) dao 메소드 인자가  Map 일때, value 의 타입이 다르면 object로 합니다. 
   -->
<mapper namespace="tblcustomer">
	<!--  리턴타입이 List 일때에는 제너릭타입만 설정하면 됩니다.  -->
	
	
	<!-- insert, update, delete 는 리턴타입 지정 x  그래도 (값은 리턴) -->
	<insert id="insert" parameterType="CustomerDto">
		insert into tbl_custom(custom_id,name,email,age,reg_date) 
               values (#{customId},#{name},#{email},#{age}, sysdate)
	</insert>
	<update id="update" parameterType="CustomerDto">	
		 update tbl_custom set email = #{email}, age = #{age} where custom_id = #{customId}
	</update>
	<delete id="delete" parameterType="Object">
		 delete from tbl_custom where custom_id = #{customId} 
	</delete>
	
	<select id = "getCustomer" parameterType= "String" resultType="CustomerDto">
		 select * from tbl_custom where custom_id = #{customId}
	</select>
	<select id = "allCustomers" resultType= "CustomerDto">
		select * from tbl_custom order by name
	</select>
	<select id = "selectByNameAge" parameterType= "CustomerDto" resultType="CustomerDto">
		select * from tbl_custom where name = #{name} and age = #{age}
	</select>
	
</mapper>  
  